## FOR PROFILING
#zmodload zsh/zprof

# Path to your oh-my-zsh configuration.
ZSH=$HOME/.oh-my-zsh

# Set name of the theme to load.
# Look in ~/.oh-my-zsh/themes/
# Optionally, if you set this to "random", it'll load a random theme each
# time that oh-my-zsh is loaded.
#ZSH_THEME="agnoster"
ZSH_THEME="powerlevel10k/powerlevel10k"

# Set to this to use case-sensitive completion
# CASE_SENSITIVE="true"

# Comment this out to disable weekly auto-update checks
DISABLE_AUTO_UPDATE="true"

# Uncomment following line if you want to disable colors in ls
# DISABLE_LS_COLORS="true"

# Uncomment following line if you want to disable autosetting terminal title.
# DISABLE_AUTO_TITLE="true"

# Uncomment following line if you want red dots to be displayed while waiting for completion
#COMPLETION_WAITING_DOTS="true"

# Which plugins would you like to load? (plugins can be found in ~/.oh-my-zsh/plugins/*)
# Custom plugins may be added to ~/.oh-my-zsh/custom/plugins/
# Example format: plugins=(rails git textmate ruby lighthouse)
plugins=(git
         history-substring-search
         screen
         tmux
         per-directory-history
         #zsh-syntax-highlighting
         #colored-man
         cabal
         aws
         #autojump
         docker
         kubectl
         #kubetail
         #venv_manager
         zsh-z
  )

if [ `uname` = "Darwin" ]; then
    #plugins+=( osx brew )
    plugins+=( osx )
fi


# source $ZSH/oh-my-zsh.sh

# Customize to your needs...

##################################################
### zsh completion
autoload -U compinit
compinit

### bash completion
autoload -U bashcompinit
bashcompinit

##################################################
### Zsh options
##################################################
# remove cdablevars to prevent tab completion on directories unless I ask for it
unsetopt  cdablevars


##################################################
### Required paths
##################################################
PATH=$PATH:/bin:/usr/local/sbin:/usr/sbin:/sbin:/usr/local/git/bin:/opt/bin:/opt/local/bin:~/.config/emacs/bin

if [ -d ~/.local/bin ]; then
   PATH=$PATH:~/.local/bin
fi
if [ -d ~/.rd/bin ]; then
   PATH=$PATH:~/.rd/bin
fi
if [ -d /System/Volumes/Data/opt/homebrew/bin ]; then
   PATH=$PATH:/System/Volumes/Data/opt/homebrew/bin
fi




if [ `uname` = "Darwin" ]; then
    #MANPATH="/usr/local/opt/gnu-sed/libexec/gnuman:$MANPATH"
    export DYLD_LIBRARY_PATH=/Developer/NVIDIA/CUDA-8.0/lib:$DYLD_LIBRARY_PATH
    export LD_LIBRARY_PATH=/Developer/NVIDIA/CUDA-8.0/lib:$LD_LIBRARY_PATH
    export CUDNN_PATH=/usr/local/cuda/lib/libcudnn.5.dylib


    ##################################################
    ### Autojump
    #[[ -s $(brew --prefix)/etc/profile.d/autojump.sh ]] && . $(brew --prefix)/etc/profile.d/autojump.sh
else
    PATH=$PATH:/opt/vertica/bin:/usr/local/cuda/bin
    export LD_LIBRARY_PATH=/usr/local/cuda/lib64:$LD_LIBRARY_PATH
fi


#export ANDROID_HOME=/usr/local/opt/android-sdk


##################################################
### To fix tramp hangs
##################################################

if [[ "$TERM" == "dumb" ]]
then
    unsetopt zle
    unsetopt prompt_cr
    unsetopt prompt_subst
    #unfunction precmd
    unfunction preexec
    PS1='$ '
fi


# Example aliases
source ~/.aliases

##################################################
### Set default editor
##################################################

export EDITOR="emacs -nw -Q"
export ALTERNATE_EDITOR="emacs -nw"


##################################################
### colors
##################################################
export COLORTERM="truecolor"
export LESSCOLORIZER='pygmentize -O style=monokai'

##################################################
### Reporting (needs to be after aliases)
##################################################

# Report CPU usage for commands running longer than 30 seconds
REPORTTIME=30



# if type "enotify" > /dev/null; then
#     notify-preexec-hook() {
#         zsh_notifier_cmd="$2"
#         zsh_notifier_time="`date +%s`"
#     }

#     notify-precmd-hook() {
#         local time_taken
#         if [[ "${zsh_notifier_cmd}" != "" ]]; then
#             time_taken=$(( `date +%s` - ${zsh_notifier_time} ))
#             if (( $time_taken > $REPORTTIME )); then
#                 notify "`hostname`" "Command: ${zsh_notifier_cmd} \nTime: ${time_taken} sec"
#             fi
#         fi
#         zsh_notifier_cmd=
#     }
# fi

# [[ -z $preexec_functions ]] && preexec_functions=()
# preexec_functions=($preexec_functions notify-preexec-hook)

# [[ -z $precmd_functions ]] && precmd_functions=()
# precmd_functions=($precmd_functions notify-precmd-hook)


##################################################
### styles
##################################################
zstyle -s ':completion:*:hosts' hosts _ssh_config
[[ -r ~/.ssh/config ]] && _ssh_config+=($(cat ~/.ssh/known_hosts | awk '{print $1}' |  cut -d "[" -f2 | cut -d "]" -f1 | tr ',' '\n'))
zstyle ':completion:*:hosts' hosts $_ssh_config


##################################################
### Prompt
##################################################

# function precmd {
#     local TERMWIDTH
#     (( TERMWIDTH = ${COLUMNS} - 1 ))
#     local PWIDTH
#     (( PWIDTH = 3*(${COLUMNS} - 1)/4 ))


#     ###
#     # Truncate the path if it's too long.

#     PR_PWDLEN=""

#     local a="$(git_prompt_info)$(get_host)"
#     local promptsize=${#a}
#     local pwdsize=${#${(%):-%~}}

#     if [[ "$promptsize + $pwdsize" -gt $PWIDTH ]]; then
#       ((PR_PWDLEN=$PWIDTH - $promptsize))
#     fi
# }


export VIRTUAL_ENV_DISABLE_PROMPT=1

function get_python_venv {
    if [[ -n "$VIRTUAL_ENV" ]] ; then
        echo "\xf0\x9f\x90\x8d $(basename -- "$(dirname -- "$VIRTUAL_ENV")") "
    fi
}

# prompt_aws() {
#   [[ -z "$AWS_PROFILE" || "$SHOW_AWS_PROMPT" = false ]] && return
#   case "$AWS_PROFILE" in
#     *-prod|*production*|*admin*) prompt_segment red yellow  "$AWS_PROFILE" ;;
#     *) prompt_segment green black "$AWS_PROFILE" ;;
#   esac
# }

# prompt_time() {
#     PRINTTIME=$(date "+%I:%M")
#     prompt_segment 8 black "$PRINTTIME"
# }

## Main prompt
# build_prompt() {
#   RETVAL=$?
#   prompt_status
#   prompt_time
#   prompt_virtualenv
#   prompt_aws
#   prompt_context
#   prompt_dir
#   prompt_git
#   prompt_bzr
#   prompt_hg
#   prompt_end
# }

#PROMPT='%{%f%b%k%}$(build_prompt) '

#########
# Iterm #
#########
if [ `uname` = "Darwin" ]; then

    if [ ! -e ~/.iterm2_shell_integration.zsh ]; then
        echo "Fetching iTerm2 zsh integration script"
        curl -L https://iterm2.com/shell_integration/zsh -o ~/.iterm2_shell_integration.zsh
    fi
    if [ -e ~/.iterm2_shell_integration.zsh ]; then
        source ~/.iterm2_shell_integration.zsh
    fi

    if [ -e ~/vtrack.conf ]; then
        source ~/vtrack.conf
    fi
fi

if [ -e ~/.configs/docker/docker_shell ]; then
    source ~/.configs/docker/docker_shell
fi

# Created by `userpath` on 2020-04-23 16:43:00
export PATH="$PATH:$HOME/.local/bin"

##########
### p10k

# To customize prompt, run `p10k configure` or edit ~/.p10k.zsh.
[[ ! -f ~/.p10k.zsh ]] || source ~/.p10k.zsh
